# Initialise other fixed quantities
Aw <- 1.3     # Ratio of sigmaw to ustar
h <- 0.15     # Grass cover height
d <- 0.7*h    # Zero-plane displacement
z0 <- 0.1*h   # Roughness length
zm <- 3       # Wind speed measurement height
# Simulate wind speeds from empirical distribution of wind speeds
set.seed(seed)
Um <- sample(boot.ws.raw, size = n, replace = TRUE)
# Simulate terminal velocities from empirical distribution of terminal velocities
set.seed(seed)
f <- sample(boot.tv.raw, size = n, replace = TRUE)
# Calculate ustar, the friction velocity
ustar <- K*Um*(log((zm - d)/z0))^(-1)
# Set up integrand for wind speed between vegetation surface and drop height H
integrand <- function(z){
(1/K)*(log((z - d)/z0))}
# Integrate to obtain U
U <- (ustar/H)*integrate(integrand, lower = d + z0, upper = H)$value
# Calculate instability parameter
sigma <- 2*(Aw^2)*sqrt((K*(H - d)*ustar)/(C0*U))
# Calculate scale parameter lambda
lambda <- (H/sigma)^2
# Calculate location parameter nu
nu <- H*U/f
# Generate inverse Gaussian distribution
set.seed(seed)
return(rinvGauss(n, nu = nu, lambda = lambda))
}
WALD.f.e.h.tom(n=10,H=1,elas="none")
WALD.f.e.h.tom(n=10,H=1,elas="none")
WALD.f.e.h.tom(n=10,H=1,elas="none")
WALD.f.e.h.tom(n=10,H=1,elas="none",seed=8675)
WALD.f.e.h.tom(n=10,H=1,elas="none",seed=8675)
WALD.f.e.h.tom(n=10,H=1,elas="none",seed=8675)
WALD.f.e.h.tom(n=10,H=1,elas="none",seed=8675)
?mapply
params$heights
sapply(c(0.5,1,1.5),WALD.f.e.h.tom,n=10)
sapply(c(0.5,1,1.5),WALD.f.e.h.tom,n=10,elas="none")
sapply(c(0.5,1,1.5),WALD.f.e.h.tom,n=10,elas="none")
sapply(c(0.5,1,1.5),WALD.f.e.h.tom,n=10,elas="none")
sapply(c(0.5,1,1.5),WALD.f.e.h.tom,n=10,elas="none",seed=8675)
sapply(c(0.5,1,1.5),WALD.f.e.h.tom,n=10,elas="none",seed=8675)
#sample dispersal events for empirical MGF - generates a N*mat.size matrix
D.sample<- sapply(params$heights,WALD.f.e.h.tom,n=10,elas="none",seed=8675)
##### Tom's version of full WALD
WALD.f.e.h.tom <- function(n, H, elas, h=0.15, seed = NULL){
# Add option for height perturbation analysis
if(elas == "dispersal"){H <- H*(1 + pert)}
# Initialise physical constants
K <- 0.4      # von Karman constant
C0 <- 3.125   # Kolmogorov constant
# Initialise other fixed quantities
Aw <- 1.3     # Ratio of sigmaw to ustar
h <- 0.15     # Grass cover height
d <- 0.7*h    # Zero-plane displacement
z0 <- 0.1*h   # Roughness length
zm <- 3       # Wind speed measurement height
# Simulate wind speeds from empirical distribution of wind speeds
set.seed(seed)
Um <- sample(boot.ws.raw, size = n, replace = TRUE)
# Simulate terminal velocities from empirical distribution of terminal velocities
set.seed(seed)
f <- sample(boot.tv.raw, size = n, replace = TRUE)
# Calculate ustar, the friction velocity
ustar <- K*Um*(log((zm - d)/z0))^(-1)
# Set up integrand for wind speed between vegetation surface and drop height H
integrand <- function(z){
(1/K)*(log((z - d)/z0))}
# Integrate to obtain U
U <- (ustar/H)*integrate(integrand, lower = d + z0, upper = H)$value
# Calculate instability parameter
sigma <- 2*(Aw^2)*sqrt((K*(H - d)*ustar)/(C0*U))
# Calculate scale parameter lambda
lambda <- (H/sigma)^2
# Calculate location parameter nu
nu <- H*U/f
# Generate inverse Gaussian distribution
set.seed(seed)
return(rinvGauss(n, nu = nu, lambda = lambda))
}
WALD.f.e.h.tom(n=10,H=1,elas="none",seed=8675)
sapply(params$heights[params$heights>h],WALD.f.e.h.tom,n=10,elas="none",seed=8675)
?runif
pi
?cos
WALD_samples<-function(N,h=0.15,elas,seed=NULL){
r=matrix(0,nrow=N,ncol=length(params$heights))
dispersing_heights=params$heights>h
r[,params$heights>h]=sapply(params$heights[params$heights>h],WALD.f.e.h.tom,n=N,elas=elas,seed=seed)
alpha <- matrix(runif(N*length(),0,2*pi),dim(r))
X=r*cos(alpha)
return()
}
WALD_samples(N=10,elas="none")
r=matrix(0,nrow=N,ncol=length(params$heights))
N=10
r=matrix(0,nrow=N,ncol=length(params$heights))
dispersing_heights=params$heights>h
r[,params$heights>h]=sapply(params$heights[params$heights>h],WALD.f.e.h.tom,n=N,elas=elas,seed=seed)
r
alpha <- matrix(runif(N*length(),0,2*pi),dim(r))
alpha <- matrix(runif(N*length(),0,2*pi),nrow=nrow(r),ncol=ncol(r))
alpha <- matrix(runif(N*length(params$heights),0,2*pi),dim(r))
alpha
X=r*cos(alpha)
WALD_samples<-function(N,h=0.15,elas,seed=NULL){
r=matrix(0,nrow=N,ncol=length(params$heights))
dispersing_heights=params$heights>h
r[,params$heights>h]=sapply(params$heights[params$heights>h],WALD.f.e.h.tom,n=N,elas=elas,seed=seed)
alpha <- matrix(runif(N*length(params$heights),0,2*pi),dim(r))
X=r*cos(alpha)
return()
}
WALD_samples(N=10,elas="none")
WALD_samples<-function(N,h=0.15,elas,seed=NULL){
r=matrix(0,nrow=N,ncol=length(params$heights))
dispersing_heights=params$heights>h
r[,params$heights>h]=sapply(params$heights[params$heights>h],WALD.f.e.h.tom,n=N,elas=elas,seed=seed)
alpha <- matrix(runif(N*length(params$heights),0,2*pi),dim(r))
X=r*cos(alpha)
return(X)
}
WALD_samples(N=10,elas="none")
WALD_samples(N=10,elas="none")$X
source("C:/Users/tm9/Dropbox/github/LTEncroachment/07_SIPM.R")
#sample dispersal events for empirical MGF - generates a N*mat.size matrix
D.samples <- WALD_samples()
#sample dispersal events for empirical MGF - generates a N*mat.size matrix
D.samples <- WALD_samples(N=10)
source("C:/Users/tm9/Dropbox/github/LTEncroachment/07_SIPM.R")
#sample dispersal events for empirical MGF - generates a N*mat.size matrix
D.samples <- WALD_samples(N=10)
D.samples
# use empirical MGF to get wavespeed from sampled dispersal events
c2star <- optimize(cs,lower=0.05,upper=4,emp=T)$objective
c2star
#sample dispersal events for empirical MGF - generates a N*mat.size matrix
D.samples <- WALD_samples(N=100)
# use empirical MGF to get wavespeed from sampled dispersal events
c2star <- optimize(cs,lower=0.05,upper=4,emp=T)$objective
c2star
#sample dispersal events for empirical MGF - generates a N*mat.size matrix
D.samples <- WALD_samples(N=1000)
# use empirical MGF to get wavespeed from sampled dispersal events
c2star <- optimize(cs,lower=0.05,upper=4,emp=T)$objective
c2star
#sample dispersal events for empirical MGF - generates a N*mat.size matrix
D.samples <- WALD_samples(N=1000)
# use empirical MGF to get wavespeed from sampled dispersal events
c2star <- optimize(cs,lower=0.05,upper=4,emp=T)$objective
c2star
#sample dispersal events for empirical MGF - generates a N*mat.size matrix
D.samples <- WALD_samples(N=1000,seed=5768)
# use empirical MGF to get wavespeed from sampled dispersal events
c2star <- optimize(cs,lower=0.05,upper=4,emp=T)$objective
c2star
#sample dispersal events for empirical MGF - generates a N*mat.size matrix
D.samples <- WALD_samples(N=1000,seed=5768)
# use empirical MGF to get wavespeed from sampled dispersal events
c2star <- optimize(cs,lower=0.05,upper=4,emp=T)$objective
c2star
#sample dispersal events for empirical MGF - generates a N*mat.size matrix
D.samples <- WALD_samples(N=10000,seed=5768)
# use empirical MGF to get wavespeed from sampled dispersal events
c2star <- optimize(cs,lower=0.05,upper=4,emp=T)$objective
c2star
cs = Vectorize(cs,"s");
plot(function(s) cs(s),0.5,4);
?Vectorize
cs = Vectorize(cs,"s",emp=T);
cs = Vectorize(cs,"s");
plot(function(s) cs(s,emp=T),0.5,4);
plot(function(s) cs(s,emp=T),0.05,4);
plot(function(s) cs(s,emp=T),0.05,2);
source("C:/Users/tm9/Dropbox/github/LTEncroachment/07_SIPM.R")
boot.prop <- 0.75
# Set number of bootstrap iterations
# Please note: one iteration takes some time (5-15 minutes) depending on computer and settings
# Ignore this if boot.on = FALSE
boot.num <- 2
# Create empty vectors to populate with wavespeeds
# c1 are the analytic wavespeeds using mean windspeed and terminal velocity and assuming H as point source of seeds
boot.c1 <- c()
# c2 are the wavespeeds from simulating dispersal events over variation in heights, windspeed, and terminal velocity
boot.c2 <- c()
# Save bootstrapped wavespeed and lambda outputs to CSV?
boot.saveOutputs <- TRUE
# Should bootstrapping occur?
# If not, the model will be run once using full data sets
boot.on <- TRUE
# Evaluate local IPM instead of spatial IPM?
# Local IPM will not include dispersal
boot.noDisp <- FALSE
# What proportion of individuals should be resampled each bootstrap interation?
# Should be in the interval (0, 1), exclusive
# Warning: setting this number very low may adversely affect model behaviour
# Ignore this if boot.on = FALSE
boot.prop <- 0.75
# Set number of bootstrap iterations
# Please note: one iteration takes some time (5-15 minutes) depending on computer and settings
# Ignore this if boot.on = FALSE
boot.num <- 2
# Create empty vectors to populate with wavespeeds
# c1 are the analytic wavespeeds using mean windspeed and terminal velocity and assuming H as point source of seeds
boot.c1 <- c()
# c2 are the wavespeeds from simulating dispersal events over variation in heights, windspeed, and terminal velocity
boot.c2 <- c()
# Override bootstrap replicate number if bootstrapping is turned off
if(boot.on == FALSE){
boot.num <- 1}
# Begin bootstrapping
time.start <- Sys.time()
for(i in 1:boot.num){
# Flip switch at beginning of bootstrapping
# Failure to do so should not affect results, but WILL increase computation time
if(i == 1){
boot.switch <- TRUE}
# "06_BootRes"
# Run resampling subroutine for wind speeds, terminal velocities, and demography
source("https://raw.githubusercontent.com/TrevorHD/LTEncroachment/master/06_BootRes.R")
# "05_CDataAnalysis_NS.R"
# Create demography models for use in SIPM, using best models from initial run of this file
# This avoids model uncertainty; only model coefficients change, not the overall structure
source("https://raw.githubusercontent.com/TrevorHD/LTEncroachment/master/05_CDataAnalysis.R")
# Construct transition matrix for minimum weighted density (zero)
TM <- TransMatrix(dens = 0, mat.size = 100)
# Evaluate SIPM to find wavespeeds
if(boot.noDisp == FALSE){
#get WALD parameters from this data bootstrap - generates a list of length mat.size containing
# plant heights and correpsonding WALD parameters
params <- WALD_par()
#sample dispersal events for empirical MGF - generates a N*mat.size matrix
D.samples <- WALD_samples(N=10000,seed=5768)
# Find the asymptotic wave speed c*(s)
c1star <- optimize(cs,lower=0.05,upper=4,emp=F)$objective
# use empirical MGF to get wavespeed from sampled dispersal events
c2star <- optimize(cs,lower=0.05,upper=4,emp=T)$objective
# Calculate minimum wavespeed, then append to bootstrapped vector of estimated wavespeeds
boot.c1 <- append(boot.c1,c1star)}
boot.c2 <- append(boot.c2,c2star)}
# Override bootstrap replicate number if bootstrapping is turned off
if(boot.on == FALSE){
boot.num <- 1}
# Begin bootstrapping
time.start <- Sys.time()
for(i in 1:boot.num){
# Flip switch at beginning of bootstrapping
# Failure to do so should not affect results, but WILL increase computation time
if(i == 1){
boot.switch <- TRUE}
# "06_BootRes"
# Run resampling subroutine for wind speeds, terminal velocities, and demography
source("https://raw.githubusercontent.com/TrevorHD/LTEncroachment/master/06_BootRes.R")
# "05_CDataAnalysis_NS.R"
# Create demography models for use in SIPM, using best models from initial run of this file
# This avoids model uncertainty; only model coefficients change, not the overall structure
source("https://raw.githubusercontent.com/TrevorHD/LTEncroachment/master/05_CDataAnalysis.R")
# Construct transition matrix for minimum weighted density (zero)
TM <- TransMatrix(dens = 0, mat.size = 100)
# Evaluate SIPM to find wavespeeds
if(boot.noDisp == FALSE){
#get WALD parameters from this data bootstrap - generates a list of length mat.size containing
# plant heights and correpsonding WALD parameters
params <- WALD_par()
#sample dispersal events for empirical MGF - generates a N*mat.size matrix
D.samples <- WALD_samples(N=10000,seed=5768)
# Find the asymptotic wave speed c*(s)
c1star <- optimize(cs,lower=0.05,upper=4,emp=F)$objective
# use empirical MGF to get wavespeed from sampled dispersal events
c2star <- optimize(cs,lower=0.05,upper=4,emp=T)$objective
# Calculate minimum wavespeed, then append to bootstrapped vector of estimated wavespeeds
boot.c1 <- append(boot.c1,c1star)
boot.c2 <- append(boot.c2,c2star)}
## UNCOMMENT TO RUN LANMBDA VS DENSITY
## Create empty list to store lambda as a function of density; assign density values to top
#if(i == 1){
#  boot.lambda <- list(density = LambdaD(d.only = TRUE))}
#
# Calculate lambda as a function of density, then append to list
#boot.lambda[[i + 1]] <- LambdaD()
#
# Create empty list to store transition matrices
if(i == 1){
boot.TM <- list()}
# Append transition matrix to list -- TM: why save these?
boot.TM[[i]] <- TM
# Calculate elapsed time
time.elapsed <- as.numeric(difftime(Sys.time(), time.start, units = "hours"))
# Clear console (on Windows) and print bootstrapping progress to console
shell("cls")
cat(paste0(i, "/", boot.num, " (", round(i/boot.num, 3)*100, "%) complete; ",
round(time.elapsed, 2), " hours elapsed."))
# Flip switch back to original setting
if(i == boot.num){
boot.switch <- FALSE}
}
boot.c1
boot.c2
str(LATR_full)
LATR_full$transplant
sum(LATR_full$transplant==T,na.rm=T)
pert
pert=0.1
#sample dispersal events for empirical MGF - generates a N*mat.size matrix
D.samples <- WALD_samples(N=10000,seed=5768)
# use empirical MGF to get wavespeed from sampled dispersal events
c2star <- optimize(cs,lower=0.05,upper=4,emp=T,pert="dispersal")$objective
#sample dispersal events for empirical MGF - generates a N*mat.size matrix
D.samples <- WALD_samples(N=10000,seed=5768,elas="dispersal")
# use empirical MGF to get wavespeed from sampled dispersal events
c2star <- optimize(cs,lower=0.05,upper=4,emp=T)$objective
c2star
#sample dispersal events for empirical MGF - generates a N*mat.size matrix
D.samples <- WALD_samples(N=10000,seed=5768)
# use empirical MGF to get wavespeed from sampled dispersal events
c2star <- optimize(cs,lower=0.05,upper=4,emp=T)$objective
c2star
matrix(1:4,c(2,2))
matrix(1:4,c(1,4))
setwd("C:/Users/tm9/Dropbox/github/shrub-demography-MCA")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(message = F)
library(tidyverse)
cactus <- read_csv("cholla_demography_20042019_cleaned.csv") %>%
select(Plot,TagID,Year_t,Height_t,Width_t,Perp_t,TotFlowerbuds_t,
Recruit,Newplant,Survival_t1,Height_t1,Width_t1,Perp_t1,TotFlowerbuds_t)
str(cactus)
str(cactus)
cactus <- read_csv("cholla_demography_20042019_cleaned.csv") %>%
select(Plot,TagID,Year_t,Height_t,Width_t,Perp_t,TotFlowerbuds_t,
Newplant,Survival_t1,Height_t1,Width_t1,Perp_t1,TotFlowerbuds_t)
cactus <- read_csv("cholla_demography_20042019_cleaned.csv") %>%
select(Plot,TagID,Year_t,Height_t,Width_t,Perp_t,TotFlowerbuds_t,
Newplant,Survival_t1,Height_t1,Width_t1,Perp_t1,TotFlowerbuds_t)
cactus <- read_csv("cholla_demography_20042019_cleaned.csv") %>%
select(Plot,TagID,Year_t,Height_t,Width_t,Perp_t,TotFlowerbuds_t,
Newplant,Survival_t1,Height_t1,Width_t1,Perp_t1,TotFlowerbuds_t1)
str(cactus)
plot(log(vol_t1) ~ log(vol_t), xlab = "Volume in year t", ylab = "Volume in year t+1",data=cactus)
plot(log(cactus$vol_t1) ~ log(cactus$vol_t), xlab = "Volume in year t", ylab = "Volume in year t+1")
volume <- function(h, w, p){
(1/3)*pi*h*(((w + p)/2)/2)^2
}
cactus <- cactus %>%
mutate(vol_t = volume(h = Height_t, w = Width_t, p = Perp_t),
vol_t1 = volume(h = Height_t1, w = Width_t1, p = Perp_t1))
plot(log(cactus$vol_t1) ~ log(cactus$vol_t), xlab = "Volume in year t", ylab = "Volume in year t+1")
abline(0,1)
plot(log(cactus$vol_t1) ~ log(cactus$vol_t), xlab = "Volume in year t", ylab = "Volume in year t+1")
abline(0,1)
legend("topleft",bty="n",lty=1,legend=c("y=x"))
growth_model <- lm(log(vol_t1) ~ log(vol_t), data = cactus)
##are the residuals normally distributed
hist(residuals(growth_model))
##is the residual variation related to size?
growth_resid <- cactus %>%
filter(!is.na(vol_t),!is.na(vol_t1)) %>%
mutate(resid = growth_model$residuals)
plot(log(growth_resid$vol_t),growth_resid$resid)
summary(growth_model)
with(cholla,
{plot(log(vol_t1) ~ log(vol_t), xlab = "Volume in year t", ylab = "Volume in year t+1")
abline(coef(growth_model)[1],coef(growth_model)[2],col="red",lwd=3)
abline(0,1)
legend("topleft",bty="n",lty=1,col=c("black","red"),lwd=c(1,3),legend=c("y=x","fitted model"))
})
summary(growth_model)
with(cactus,
{plot(log(vol_t1) ~ log(vol_t), xlab = "Volume in year t", ylab = "Volume in year t+1")
abline(coef(growth_model)[1],coef(growth_model)[2],col="red",lwd=3)
abline(0,1)
legend("topleft",bty="n",lty=1,col=c("black","red"),lwd=c(1,3),legend=c("y=x","fitted model"))
})
x_dummy <- seq(min(log(cholla$vol_t),na.rm=T),max(log(cholla$vol_t),na.rm=T),0.1)
x_dummy <- seq(min(log(cactus$vol_t),na.rm=T),max(log(cactus$vol_t),na.rm=T),0.1)
plot(x_dummy,
dnorm(x = x_dummy,
mean = coef(growth_model)[1] + coef(growth_model)[2] * median(log(cactus$vol_t),na.rm=T),
sd = summary(growth_model)$sigma),
type="l",lwd=3,xlab="log size t+1",ylab="Density")
abline(v=median(log(cactus$vol_t),na.rm=T))
growth_model <- lm(log(vol_t1) ~ log(vol_t), data = cactus)
plot(log(cactus$vol_t1) ~ log(cactus$vol_t), xlab = "Volume in year t", ylab = "Volume in year t+1")
abline(coef(growth_model)[1],coef(growth_model)[2],col="red",lwd=3)
abline(0,1)
legend("topleft",bty="n",lty=1,col=c("black","red"),lwd=c(1,3),legend=c("y=x","fitted model"))
##are the residuals normally distributed
hist(residuals(growth_model))
##is the residual variation related to size?
growth_resid <- cactus %>%
filter(!is.na(vol_t),!is.na(vol_t1)) %>%
mutate(resid = growth_model$residuals)
plot(log(growth_resid$vol_t),growth_resid$resid)
##are the residuals normally distributed
hist(residuals(growth_model)); shapiro.test(residuals(growth_model))
residuals(growth_model)
shapiro.test(residuals(growth_model))
##are the residuals normally distributed
resids <- residuals(growth_model)
shapiro.test(resids)
shapiro.test(rnorm(500))
rnorm(500)
resids
##are the residuals normally distributed
resids <- as.vector(residuals(growth_model))
resids
shapiro.test(resids)
?shapiro.test
shapiro.test(resids[1:5000])
shapiro.test(residuals(growth_model)[1:5000])
##is the residual variation related to size?
growth_resid <- cactus %>%
filter(!is.na(vol_t),!is.na(vol_t1)) %>%
mutate(resid = growth_model$residuals)
plot(log(growth_resid$vol_t),growth_resid$resid)
plot(cactus$Survival_t1 ~ log(cactus$vol_t), xlab = "Volume in year t", ylab = "Survival in year t+1")
surv_bin <- cactus %>%
mutate(size_bin = cut_interval(log(vol_t), n=8)) %>%
group_by(size_bin) %>%
summarise(mean_size = mean(log(vol_t),na.rm=T),
mean_surv = mean(Survival_t1,na.rm=T))
surv_bin <- cactus %>%
mutate(size_bin = cut_interval(log(vol_t), n=8)) %>%
group_by(size_bin) %>%
summarise(mean_size = mean(log(vol_t),na.rm=T),
mean_surv = mean(Survival_t1,na.rm=T))
plot(cactus$Survival_t1 ~ log(cactus$vol_t), xlab = "Volume in year t", ylab = "Survival in year t+1", col="gray")
points(surv_bin$mean_size, surv_bin$mean_surv, pch=16, cex=2)
survival_model <- glm(Survival_t1 ~ log(vol_t), family = "binomial", data=cactus)
summary(survival_model)
resid.ssq <- sum(residuals(survival_model,type="pearson")^2)
resid.df <- nrow(subset(cactus,!is.na(vol_t) & !is.na(Survival_t1)))-length(coef(survival_model))
resid.ssq/resid.df
invlogit <- function(x){exp(x)/(1+exp(x))}
plot(cactus$Survival_t1 ~ log(cactus$vol_t), xlab = "Volume in year t", ylab = "Survival in year t+1", col="gray")
points(surv_bin$mean_size, surv_bin$mean_surv, pch=16, cex=2)
lines(x_dummy,invlogit(coef(survival_model)[1]+coef(survival_model)[2]*x_dummy),col="red",lwd=3)
lines(x_dummy,survival_model$family$linkinv(coef(survival_model)[1]+coef(survival_model)[2]*x_dummy),col="blue",lty=2,lwd=3)
invlogit <- function(x){exp(x)/(1+exp(x))}
plot(cactus$Survival_t1 ~ log(cactus$vol_t), xlab = "Volume in year t", ylab = "Survival in year t+1", col="gray")
points(surv_bin$mean_size, surv_bin$mean_surv, pch=16, cex=2)
lines(x_dummy,invlogit(coef(survival_model)[1]+coef(survival_model)[2]*x_dummy),col="red",lwd=3)
flowering_model <- glm(TotFlowerbuds_t>0 ~ log(vol_t), family = "binomial", data=cactus)
summary(flowering_model)
plot(cactus$TotFlowerbuds_t>0 ~ log(cactus$vol_t), xlab = "Volume in year t", ylab = "Pr(Flowering)", col="gray")
flow_bin <- cactus %>%
mutate(size_bin = cut_interval(log(vol_t), n=8)) %>%
group_by(size_bin) %>%
summarise(mean_size = mean(log(vol_t),na.rm=T),
mean_surv = mean(TotFlowerbuds_t>0,na.rm=T))
flow_bin <- cactus %>%
mutate(size_bin = cut_interval(log(vol_t), n=8)) %>%
group_by(size_bin) %>%
summarise(mean_size = mean(log(vol_t),na.rm=T),
mean_flow = mean(TotFlowerbuds_t>0,na.rm=T))
plot(cactus$TotFlowerbuds_t>0 ~ log(cactus$vol_t), xlab = "Volume in year t", ylab = "Pr(Flowering)", col="gray")
points(flow_bin$mean_size, flow_bin$mean_flow, pch=16, cex=2)
lines(x_dummy,invlogit(coef(flowering_model)[1]+coef(flowering_model)[2]*x_dummy),col="red",lwd=3)
fert_model <- glm(TotFlowerbuds_t ~ log(vol_t), family = "poisson", data=subset(cactus,TotFlowerbuds_t>0))
plot(cactus$TotFlowerbuds_t[cactus$TotFlowerbuds_t>0] ~ log(cactus$vol_t[cactus$TotFlowerbuds_t>0]), xlab = "Volume in year t", ylab = "Fertility of flowering plants in year t", col="gray")
lines(x_dummy,exp(coef(fert_model)[1]+coef(fert_model)[2]*x_dummy),col="red",lwd=3)
fert_model <- glm(TotFlowerbuds_t ~ log(vol_t), family = "poisson", data=subset(cactus,TotFlowerbuds_t>0))
plot(cactus$TotFlowerbuds_t[cactus$TotFlowerbuds_t>0] ~ log(cactus$vol_t[cactus$TotFlowerbuds_t>0]), xlab = "Volume in year t", ylab = "Fertility of flowering plants in year t", col="gray")
lines(x_dummy,exp(coef(fert_model)[1]+coef(fert_model)[2]*x_dummy),col="red",lwd=3)
resid.ssq <- sum(residuals(fert_model,type="pearson")^2)
resid.df <- nrow(subset(cactus,!is.na(vol_t) & !is.na(TotFlowerbuds_t)))-length(coef(fert_model))
resid.ssq/resid.df
library(lme4)
surv_glmm <- glmer(Survival_t1~log(vol_t)+(log(vol_t)|Plot),family="binomial",data=cactus)
summary(surv_glmm)
plot(cactus$Survival_t1 ~ log(cactus$vol_t), xlab = "Volume in year t", ylab = "Survival in year t+1", col="gray")
points(surv_bin$mean_size, surv_bin$mean_surv, pch=16, cex=2)
lines(x_dummy,invlogit(coef(survival_model)[1]+coef(survival_model)[2]*x_dummy),col="red",lwd=3)
lines(x_dummy,invlogit(fixef(surv_glmm)[1]+fixef(surv_glmm)[2]*x_dummy),col="blue",lwd=3)
legend("bottomright",bty="n",lty=1,col=c("red","blue"),lwd=3,legend=c("GLM","GLMM"))
surv_glmm_year <- glmer(Survival_t1~log(vol_t)+(1|Plot)+(1|Year_t),family="binomial",data=cactus)
plot(cactus$Survival_t1 ~ log(cactus$vol_t), xlab = "Volume in year t", ylab = "Survival in year t+1", col="gray")
points(surv_bin$mean_size, surv_bin$mean_surv, pch=16, cex=2)
lines(x_dummy,invlogit(coef(survival_model)[1]+coef(survival_model)[2]*x_dummy),col="red",lwd=3)
lines(x_dummy,invlogit(fixef(surv_glmm)[1]+fixef(surv_glmm)[2]*x_dummy),col="blue",lwd=3)
lines(x_dummy,invlogit(fixef(surv_glmm_year)[1]+fixef(surv_glmm_year)[2]*x_dummy),col="tomato",lwd=3)
legend("bottomright",bty="n",lty=1,col=c("red","blue","tomato"),lwd=3,legend=c("GLM","GLMMplot","GLMMplotyear"))
cactus <- read_csv("cholla_demography_20042019_cleaned.csv") %>%
select(Plot,TagID,Year_t,Height_t,Width_t,Perp_t,TotFlowerbuds_t,
Newplant,Survival_t1,Height_t1,Width_t1,Perp_t1,TotFlowerbuds_t1)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(message = F)
library(lme4)
library(tidyverse)
cactus <- read_csv("cholla_demography_20042019_cleaned.csv") %>%
select(Plot,TagID,Year_t,Height_t,Width_t,Perp_t,TotFlowerbuds_t,
Newplant,Survival_t1,Height_t1,Width_t1,Perp_t1,TotFlowerbuds_t1)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(message = F)
library(lme4)
library(tidyverse)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(message = F)
cactus <- read_csv("cholla_demography_20042019_cleaned.csv") %>%
select(Plot,TagID,Year_t,Height_t,Width_t,Perp_t,TotFlowerbuds_t,
Newplant,Survival_t1,Height_t1,Width_t1,Perp_t1,TotFlowerbuds_t1)
volume <- function(h, w, p){
(1/3)*pi*h*(((w + p)/2)/2)^2
}
cactus <- cactus %>%
mutate(vol_t = volume(h = Height_t, w = Width_t, p = Perp_t),
vol_t1 = volume(h = Height_t1, w = Width_t1, p = Perp_t1))
